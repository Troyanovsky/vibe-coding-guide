# Lesson 3: The AI-Assisted Workflow: From Idea to Interactive Prototype

## Going Beyond Random Prompting

So you've experimented with AI coding tools and maybe built a few small projects. That's awesome! But if you're like most people, you've probably hit that wall where your prompts start feeling random, the AI gets confused about what you're building, and everything becomes a mess.

Here's the thing: successful AI-assisted development isn't about finding the perfect prompt. It's about having a **structured workflow** that keeps both you and the AI on track. Think of it like having a roadmap for a road trip -- you could just start driving and hope for the best, but you'll get much better results with some planning.

The workflow I'm about to show you works whether you're a product manager who's never touched code or a engineer who has programming experience. It's flexible and you can just take the core idea and adapt it to your needs.

## Step 1: Define & Plan

### Write Clear Product Requirements

Before the AI writes down any line of code, you need to know what you're building. This sounds obvious, but most people skip this step and wonder why the AI keeps building the wrong thing.

Start by writing down your **user stories** and **key features** in detail. Don't just say "I want a recipe app." Instead, write something like:

> "As a home cook, I want to search for recipes by ingredients I have at home, so I can decide what to cook without going to the store. The app should let me input ingredients, show matching recipes with photos, and save my favorites."

(This is already a simplified version. If you can be more specific, that would be great!)

Be specific about what you want the AI to build. The more detail you provide upfront, the less back-and-forth you'll need later.

### Vibe-PMing with AI

If you're a product manager like me, I guess you're pretty comfortable with writing PRD (product requirement document). But if you don't have the skills, don't worry. You can use AI to help you.

If you're just can't clearly lay out what you want to build. You can actually use AI to help you **refine your own product requirements**. I would call it "vibe-PMing" -- having the AI act as your product manager.

You can do this step in your AI chat interface and not necessarily in the AI codin gtools. Start a conversation with your AI and say something like: "I want to build a recipe app where users can search by ingredients. Help me think through the user flows and potential edge cases. Make sure to ask me questions to clarify."

The AI might come back with questions like:
- "What happens if a user searches for an ingredient that's not in your database?"
- "Should users be able to filter by dietary restrictions?"
- "How do you handle recipe variations or substitutions?"

Have this conversation over multiple rounds. Add any requirements or ideas that comes into your mind. Let the AI challenge your assumptions and suggest features you hadn't thought of. Once you're happy with the direction, ask the AI to summarize everything into a clean `requirements.md` document and save it to your project folder.

This document becomes your north star -- both for you and for the AI in later steps.

## Step 2: AI-Assisted Technical Design & Planning

### System Design and Architecture

Now that you know *what* you're building, it's time to figure out *how* to build it. Even if you're not technical, this step is crucial because it gives the AI a framework to work within.

Ask your AI to suggest a technical architecture based on your requirements. For example: "Based on the requirements in `requirements.md`, suggest a basic architecture for this recipe website, including frontend structure and potential backend needs."

Give the AI as much context as possible:
- Project overview from your requirements
- Platform specification (web app, mobile, etc.)
- Purpose and main use cases
- Core features list

If your AI tool has different modes or roles (like "architect mode" in some tools), use that. Have the AI generate a `system_design.md` document that outlines the overall structure, main components, and how they'll work together.

You don't need to understand every technical detail, but having this roadmap prevents the AI from making random architectural decisions later.

### AI Task Breakdown

Large projects feel overwhelming, but every complex app is just a collection of smaller, manageable pieces. This is where AI really shines -- it can break down your system design into step-by-step implementation tasks.

Reference both your `requirements.md` and `system_design.md` and ask the AI: "Break this down into specific implementation tasks, ordered by priority and dependencies."

You might get something like:
1. Set up basic HTML structure and navigation
2. Create recipe search form component
3. Build ingredient input functionality
4. Implement recipe display cards
5. Add favorite/save functionality

Some AI coding tools already include task management features like checklists or scratch pads. If not, have the AI generate a `todo_list.md` file that you can reference throughout development.

## 3.3. Step 3: "Coding" - The Iterative Prompting & Generation Phase

### Referencing Planning Documents

Here's where your upfront planning pays off. Instead of random prompts like "make a recipe app," you now have specific, contextual requests like: "Looking at `requirements.md` and `system_design.md`, implement task #1 from `todo_list.md`: Set up the basic HTML structure and navigation."

**Do ONE task at a time.** This is crucial. Don't try to build everything in one massive prompt. The AI works best when it has a focused, specific goal.

After each successful task, save your progress (preferably with git commits, though many tools have automatic checkpoints). If something goes wrong, you can easily revert to the last working state.

### The Power of Context

When prompting for specific components, always reference your planning documents. The AI can then make decisions that align with your overall vision instead of just guessing what you want.

For example: "Based on the user flow described in `requirements.md`, create the ingredient search component outlined in `system_design.md`. This should handle the edge cases we discussed around missing ingredients."

## 3.4. Other Common AI-Assisted Workflows

### Explore, Plan, Code, Commit

This is the standard cycle we just walked through: define requirements, plan with AI, generate code, and commit your progress. It's simple but effective for most projects.

### Test-Driven AI Development

If you're more technically inclined, try describing the expected behavior to the AI first: "I need a function that takes a list of ingredients and returns matching recipes. Here's what the input and output should look like..." Have the AI generate tests for this behavior, then generate the code that passes those tests.

This approach helps catch bugs early and ensures your code actually does what you think it does.

### Visual Iteration

For UI-heavy projects, generate code, preview the result, then use visual feedback to refine your next prompt. Screenshots can be incredibly powerful context for the AI: "The layout looks good, but the spacing between recipe cards is too tight. Can you adjust the CSS to add more breathing room?"

### Safe YOLO Mode (Experimentation Branching)

Sometimes you want to experiment with a completely different approach without risking your working code. Create a temporary git branch (`git checkout -b experimental-feature`), then go wild with the AI generation. If it works, great -- merge it back. If not, just delete the branch (`git branch -D experimental-feature`) and you're back to safety.

This gives you the best of both worlds: the ability to experiment freely while maintaining a stable codebase.

## The Big Picture

The key insight here is that successful AI-assisted development isn't about finding magical prompts. It's about **structured collaboration** between you and the AI. You provide direction, context, and quality control. The AI provides implementation speed and technical knowledge.

When you follow this workflow, you'll find that the AI stays focused, makes fewer mistakes, and builds exactly what you had in mind. Plus, you'll actually understand what you're building instead of just hoping the AI got it right.

Ready to put this into practice? In the next lesson, we'll walk through building a real project using this exact workflow, so you can see how all these pieces fit together.